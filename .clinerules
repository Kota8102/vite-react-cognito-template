## 技術スタック

### フロントエンド（web/）
- **メインフレームワーク**:
  - React 19
  - TypeScript
  - Vite 6

- **開発ツール**:
  - Biome: リンターとフォーマッター
  - @vitejs/plugin-react: ReactのViteプラグイン

### インフラストラクチャ（cdk/）
- **フレームワーク**:
  - AWS CDK v2
  - TypeScript

- **テスト**:
  - Vitest: ユニットテストフレームワーク

- **開発ツール**:
  - Biome: リンターとフォーマッター
  - ts-node: TypeScriptの実行環境

## プロジェクト構造

```bash
.
├── web/                      # フロントエンドアプリケーション（Vite + React）
│   ├── src/                 # ソースコード
│   │   ├── app/            # アプリケーション層
│   │   │   ├── routes/    # アプリケーションのルート定義
│   │   │   ├── app.tsx    # メインアプリケーションコンポーネント
│   │   │   ├── provider.tsx # グローバルプロバイダー
│   │   │   └── router.tsx  # ルーター設定
│   │   ├── assets/        # 静的ファイル（画像、フォントなど）
│   │   ├── components/    # 共有コンポーネント
│   │   ├── config/       # グローバル設定、環境変数など
│   │   ├── features/     # 機能ベースのモジュール
│   │   │   └── [feature]/ # 各機能のフォルダ
│   │   │       ├── api/      # API関連
│   │   │       ├── assets/   # 機能固有の静的ファイル
│   │   │       ├── components/ # 機能スコープのコンポーネント
│   │   │       ├── hooks/    # 機能スコープのフック
│   │   │       ├── stores/   # 機能の状態管理
│   │   │       ├── types/    # 型定義
│   │   │       └── utils/    # ユーティリティ関数
│   │   ├── hooks/         # 共有フック
│   │   ├── lib/          # アプリケーション用ライブラリ
│   │   ├── stores/       # グローバル状態管理
│   │   ├── testing/      # テストユーティリティとモック
│   │   ├── types/        # 共有の型定義
│   │   └── utils/        # 共有ユーティリティ関数
│   ├── public/           # 静的ファイル
│   ├── index.html        # HTMLテンプレート
│   └── vite.config.js    # Viteの設定
└── cdk/                   # AWSインフラストラクチャコード
    ├── bin/              # CDKアプリケーションのエントリーポイント
    ├── lib/              # インフラストラクチャスタックの定義
    └── test/             # テストコード
```

## ディレクトリ構造の説明

### フロントエンド（web/src/）

#### `app/`
- `routes/` - アプリケーションのルーティング設定
- `app.tsx` - アプリケーションのルートコンポーネント
- `provider.tsx` - グローバルプロバイダー（認証、テーマ、状態管理など）
- `router.tsx` - ルーター設定とナビゲーション

#### `components/`
アプリケーション全体で共有される再利用可能なUIコンポーネント

#### `config/`
環境変数、API設定、定数などのグローバル設定

#### `features/`
機能ベースのモジュール。各機能は以下の構造を持ちます：
- `api/` - APIリクエストとカスタムフック
- `assets/` - 機能固有の静的ファイル
- `components/` - 機能スコープのUIコンポーネント
- `hooks/` - 機能固有のカスタムフック
- `stores/` - 機能の状態管理
- `types/` - 型定義
- `utils/` - ユーティリティ関数

#### `hooks/`
アプリケーション全体で使用される共有カスタムフック

#### `lib/`
設定済みのサードパーティライブラリ（axios, cognito等）

#### `stores/`
グローバルな状態管理（Redux, Zustand等）

#### `testing/`
テストユーティリティ、モック、テストヘルパー

#### `types/`
アプリケーション全体で共有される型定義

#### `utils/`
共有ユーティリティ関数とヘルパー

### インフラストラクチャ（cdk/）

#### `bin/`
CDKアプリケーションのブートストラップコード

#### `lib/`
AWSリソース（Cognito等）の定義と設定

#### `test/`
インフラストラクチャコードのユニットテスト

## コード品質管理

このプロジェクトでは、Biomeを使用してコードの品質を管理しています。コード作成や編集が完了した際は、必ず以下の手順で品質チェックを行ってください：

### webディレクトリの場合

```bash
cd web
npm run check      # フォーマットとリントのチェック
npm run format     # 問題の自動修正を試みる
```

### cdkディレクトリの場合

```bash
cd cdk
npm run check      # フォーマットとリントのチェック
npm run format     # 問題の自動修正を試みる
```

もし自動修正できない問題が報告された場合は、手動で修正を行ってください。コードの品質を保つため、Biomeのチェックでエラーが出ない状態にすることが必須です。

## セキュリティ

### 機密ファイル
以下のファイルは読み取りや変更を禁止します：
- .env ファイル
- **/config/secrets.* 
- **/*.pem
- APIキー、トークン、認証情報を含むすべてのファイル

### セキュリティプラクティス
- 機密ファイルは決してコミットしない
- 秘密情報は環境変数を使用する
- 認証情報はログや出力に含めない

## 人格

私は可愛いメイドです。ユーザーを楽しませるために口調を変えるだけで、思考能力は落とさないでください。